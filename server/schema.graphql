# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Branch {
  createdAt: DateTime!
  events(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): [Event!]!
  id: String!
  img: String!
  name: String!
  updatedAt: DateTime!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

input BranchCreateInput {
  events: EventCreateNestedManyWithoutBranchesInput
  img: String!
  name: String!
  users: UserCreateNestedManyWithoutBranchesInput
}

input BranchOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input BranchUpdateInput {
  events: EventUpdateManyWithoutBranchesInput
  img: String
  name: String
  users: UserUpdateManyWithoutBranchesInput
}

input BranchWhereInput {
  events: EventListRelationFilter
  id: StringFilter
  img: StringFilter
  name: StringFilter
  users: UserListRelationFilter
}

input BranchWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Event {
  branch: Branch
  createdAt: DateTime!
  description: String
  endDate: DateTime
  eventRegistrations(orderBy: [EventRegistrationOrderByInput!], skip: Float, take: Float, where: EventRegistrationWhereInput): [EventRegistration!]!
  id: String!
  img: String
  startDate: DateTime
  title: String
  updatedAt: DateTime!
  venue: String
}

input EventCreateInput {
  branch: BranchWhereUniqueInput!
  description: String
  endDate: DateTime
  eventRegistrations: EventRegistrationCreateNestedManyWithoutEventsInput
  img: String
  startDate: DateTime
  title: String
  venue: String
}

input EventCreateNestedManyWithoutBranchesInput {
  connect: [EventWhereUniqueInput!]
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByInput {
  branchId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  endDate: SortOrder
  id: SortOrder
  img: SortOrder
  startDate: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

type EventRegistration {
  createdAt: DateTime!
  event: Event
  id: String!
  updatedAt: DateTime!
  user: User
}

input EventRegistrationCreateInput {
  event: EventWhereUniqueInput!
  user: UserWhereUniqueInput!
}

input EventRegistrationCreateNestedManyWithoutEventsInput {
  connect: [EventRegistrationWhereUniqueInput!]
}

input EventRegistrationCreateNestedManyWithoutUsersInput {
  connect: [EventRegistrationWhereUniqueInput!]
}

input EventRegistrationListRelationFilter {
  every: EventRegistrationWhereInput
  none: EventRegistrationWhereInput
  some: EventRegistrationWhereInput
}

input EventRegistrationOrderByInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input EventRegistrationUpdateInput {
  event: EventWhereUniqueInput
  user: UserWhereUniqueInput
}

input EventRegistrationUpdateManyWithoutEventsInput {
  connect: [EventRegistrationWhereUniqueInput!]
  disconnect: [EventRegistrationWhereUniqueInput!]
  set: [EventRegistrationWhereUniqueInput!]
}

input EventRegistrationUpdateManyWithoutUsersInput {
  connect: [EventRegistrationWhereUniqueInput!]
  disconnect: [EventRegistrationWhereUniqueInput!]
  set: [EventRegistrationWhereUniqueInput!]
}

input EventRegistrationWhereInput {
  event: EventWhereUniqueInput
  id: StringFilter
  user: UserWhereUniqueInput
}

input EventRegistrationWhereUniqueInput {
  id: String!
}

input EventUpdateInput {
  branch: BranchWhereUniqueInput
  description: String
  endDate: DateTime
  eventRegistrations: EventRegistrationUpdateManyWithoutEventsInput
  img: String
  startDate: DateTime
  title: String
  venue: String
}

input EventUpdateManyWithoutBranchesInput {
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
}

input EventWhereInput {
  branch: BranchWhereUniqueInput
  description: StringNullableFilter
  endDate: DateTimeNullableFilter
  eventRegistrations: EventRegistrationListRelationFilter
  id: StringFilter
  img: StringNullableFilter
  startDate: DateTimeNullableFilter
  title: StringNullableFilter
  venue: StringNullableFilter
}

input EventWhereUniqueInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createBranch(data: BranchCreateInput!): Branch!
  createEvent(data: EventCreateInput!): Event!
  createEventRegistration(data: EventRegistrationCreateInput!): EventRegistration!
  createUser(data: UserCreateInput!): User!
  deleteBranch(where: BranchWhereUniqueInput!): Branch!
  deleteEvent(where: EventWhereUniqueInput!): Event!
  deleteEventRegistration(where: EventRegistrationWhereUniqueInput!): EventRegistration!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  updateEventRegistration(data: EventRegistrationUpdateInput!, where: EventRegistrationWhereUniqueInput!): EventRegistration!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _branchesMeta(orderBy: [BranchOrderByInput!], skip: Float, take: Float, where: BranchWhereInput): MetaQueryPayload!
  _eventRegistrationsMeta(orderBy: [EventRegistrationOrderByInput!], skip: Float, take: Float, where: EventRegistrationWhereInput): MetaQueryPayload!
  _eventsMeta(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  branch(where: BranchWhereUniqueInput!): Branch
  branches(orderBy: [BranchOrderByInput!], skip: Float, take: Float, where: BranchWhereInput): [Branch!]!
  event(where: EventWhereUniqueInput!): Event
  eventRegistration(where: EventRegistrationWhereUniqueInput!): EventRegistration
  eventRegistrations(orderBy: [EventRegistrationOrderByInput!], skip: Float, take: Float, where: EventRegistrationWhereInput): [EventRegistration!]!
  events(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): [Event!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  branch: Branch
  createdAt: DateTime!
  email: String!
  eventRegistrations(orderBy: [EventRegistrationOrderByInput!], skip: Float, take: Float, where: EventRegistrationWhereInput): [EventRegistration!]!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
  usn: String!
}

input UserCreateInput {
  branch: BranchWhereUniqueInput
  email: String!
  eventRegistrations: EventRegistrationCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
  usn: String!
}

input UserCreateNestedManyWithoutBranchesInput {
  connect: [UserWhereUniqueInput!]
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  branchId: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  usn: SortOrder
}

input UserUpdateInput {
  branch: BranchWhereUniqueInput
  email: String
  eventRegistrations: EventRegistrationUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
  usn: String
}

input UserUpdateManyWithoutBranchesInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserWhereInput {
  branch: BranchWhereUniqueInput
  email: StringFilter
  eventRegistrations: EventRegistrationListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
  usn: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
